The Jordan sg_min problem is of such complexity that is warrants an
additional readme file to explain the command arguments and
postprocessing.


The overall picture:
--------------------
The calculation of the minimum distance to a matrix with a particular
Jordan structure is performed by transforming the problem to a
minimization over a Stiefel-Grassmann manifold.  The Stiefel-Grassmann
point is the invariant subspace of the nearby Jordan strcture, which
is improved iteratively.  At the end of the computation the optimal
subspace is returned and some post-processing is required to produce
the actual, nearby matrix.


Parameters of sg_min/Jordan:
----------------------------
A Jordan structure can be specified by a sequence of distinct eigenvalues,
l_1, l_2,...,l_k, and information describing each the multiplicity, or
canonical structure of each eigenvalue, i.e. for each l_i a set of
integers S_i of the sizes of the jordan blocks l_i, e.g. if one were
acribing a Jordan structure consisting of 3 blocks of order 2 and one
block of order 5, the sequence of integers for that structure is
[2 2 2 5] (which, for our purposes is the same as [2 2 5 2] or 
[2 2 2 5 0 0]).

Thus the parameters to the Jordan problem are eigvs = [l_1 l_2 ... l_k]
and segre = [S_1; S_2; .... ; S_k] (where the S_i are padded with 0's to
make segre rectangular).

Additionally, there is a type argument: 'orbit' or 'bundle' which tells
the program as to whether to consider the given eigenvalues fixed
('orbit'), or allowed to be shifted about, if that will produce a closer
structure ('bundle').  If one is working a 'bundle' problem, it is still
a good idea to give eigvs good guesses as to what the eigenvalues of the
nearby Jordan structure are, as eigvs is used to generate the initial
guess.


The initial guess:
------------------
The initial guess is generated by applying a version of the GUPTRI
algorithm to the given matrix using eigvs and segre to guide the
computation.  If eigvs and segre describe a nearby structure, then the
guess function will return an approximation to the nearby invariant
subspace which will be iteratively improved by sg_min.

The guess does not depend upon the type argument.  Thus, eigvs is 
an important parameter even if the minimization is of the 'bundle'
type, because a better guess for eigvs prduces a better initial guess.
If one is working a 'bundle' problem, this is the only place where 
eigvs is used, so if one has an initial guess from some other source
(perhaps a previous sg_min computation), then can use that guess and
not worry about what values he/she has given eigvs.


Post-processing:
----------------
sg_min will iteratively improve the invariant subspace of the nearby
Jordan structure.  Once it has finished, it will return that improved
subspace.  To generate the nearby matrix with the given structure and 
that subspace, one must call the post function.

The post function returns the nearby matrix and will return the
eigenvalues associated with its Jordan structure (which will generally be
different from the given eigvs if the problem was of a 'bundle' type).


Sample runs:
------------
This directory contains multiple sample runs in order for the user to get
a better idea of what the sg_min/Jordan calling conventions are.  The
example which is printed in the Eigenvalue Templates book is sample-1.run.